<?php

/*
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Item extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Item_model');
        $this->load->model('attribute_model');

        $this->load->helper(array('form', 'url'));

        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");


    }

    /*
     * Listing of items
     */
    function index()
    {

        $params['limit'] = RECORDS_PER_PAGE;
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('item/index?');
        $config['total_rows'] = $this->Item_model->get_all_items_count();
        $this->pagination->initialize($config);

        $data['items'] = $this->Item_model->get_all_items($params);

        $data['_view'] = 'item/index';


        $this->load->view('layouts/main', $data);
    }


    /*
     * Essential Attirbutes
     */
    function getEssentialAttributes()
    {


        $data['attributes'] = $this->attribute_model->get_essential_attributes();
        echo json_encode($data['attributes']);

    }

    function getItemAttributes()
    {
        $id = $this->input->post('id');
        $this->load->model('item_attribute_model');
        $data['attributes'] = $this->item_attribute_model->get_item_attribute_by_item($id);
        echo json_encode($data['attributes']);

    }

    function getItemIngrident()
    {
        $id = $this->input->get('id');
        $this->load->model('item_ingrident_model');

        $data['ingridents'] = $this->item_ingrident_model->get_item_ingrident_by_item($id);
        echo json_encode($data['ingridents']);

    }

    function getItemCategories()
    {
        $id = $this->input->post('id');
      
        $this->load->model('item_category_model');

        $data['categories'] = $this->item_category_model->get_item_category_by_item($id);
        echo json_encode($data['categories']);

    }


    /*
     * Attributes for autocomplete
     */

    public function GetAttributeName()
    { 
        $keyword = $this->input->post('keyword');
        $data = $this->attribute_model->get_attribute_by_title($keyword);
        echo json_encode($data);
    }

  

    /*
     * Categorys for autocomplete
     */

    public function GetCategoryName()
    {
        $this->load->model('category_model');
        $keyword = $this->input->post('keyword');
        $data = $this->category_model->get_category_by_title($keyword);
        echo json_encode($data);
    }

  


    /*
     * Adding a new item
     */
    function add()
    {
        if (isset($_POST) && count($_POST) > 0) {

            $config = array(
                'upload_path' => "./uploads/",
                'allowed_types' => "gif|jpg|png|jpeg|pdf",
                'overwrite' => TRUE,
                'max_size' => "2048000", // Can be set to particular file size , here it is 2 MB(2048 Kb)
                'max_height' => "2000",
                'max_width' => "3000"
            );
            $this->load->library('upload', $config);
            if ($this->upload->do_upload('image')) {
                $data = array('upload_data' => $this->upload->data());

               
            } else {

                $error = array('error' => $this->upload->display_errors());
                // echo print_r($error);
            }

            $categories = json_decode($_POST['cats'], true);
            $subtitle = "";
            foreach ($categories as $cat) {
                $subtitle = $subtitle . " - " . $cat['title'];
            }

            $params = array(
                'is_featured' => isset($_POST['is_featured']) ? $this->input->post('is_featured') : 0,
                'title' => $this->input->post('title'),
                'text' => $this->input->post('text'),
                'sub_title' => $subtitle,
                'serving_size' => $this->input->post('serving_size'),
                'serving_per_container' => $this->input->post('serving_per_container'),
                'calories' => $this->input->post('calories'),
                'fat' => $this->input->post('fat'),
                'proteins' => $this->input->post('proteins'),
                'carbohydrates' => $this->input->post('carbohydrates'),
                'price' => $this->input->post('price'),

               

           
                'sugars' => $this->input->post('sugars'),
                'saturated_fat' => $this->input->post('saturated_fat'),
        
                'image' => isset($_FILES['image']) ? $_FILES['image']['name'] : "default.jpg",
                'calories_from_fat' => $this->input->post('calories_from_fat'),
                'cat_id' => $this->input->post('cat_id'),
            );

            $item_id = $this->Item_model->add_item($params);

        
            /*insert categries*/

            $this->load->model('Item_category_model');


            if(isset($_POST['categories'])){
            $categories = json_decode($_POST['categories'], true);


            if (is_array($categories) || is_object($categories)) {
                foreach ($categories as $cat) {


                    $paramss = array(
                        'item_id' => $item_id,
                        'cat_id' => $cat['id']

                    );

                    $this->Item_category_model->add_item_ingrident($paramss);
                }
            }
        }

            redirect('item/index');
        } else {
            $this->load->model('Category_model');
            $data['all_categories'] = $this->Category_model->get_all_categories();

            $data['_view'] = 'item/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a item
     */
    function edit($id)
    {
        // check if the item exists before trying to edit it
        $data['item'] = $this->Item_model->get_item($id);
        $image = $data['item']['image'];

        $new_upload = false;

        if (isset($data['item']['id'])) {
            if (isset($_POST) && count($_POST) > 0) {

               if(isset($_FILES['image']) || $_FILES['image']['error'] != 4) {
                    $config = array(
                        'upload_path' => "./uploads/",
                        'allowed_types' => "gif|jpg|png|jpeg|pdf",
                        'overwrite' => TRUE,
                        'max_size' => "2048000", // Can be set to particular file size , here it is 2 MB(2048 Kb)
                        'max_height' => "2000",
                        'max_width' => "3000"
                    );
                    $this->load->library('upload', $config);
                    if ($this->upload->do_upload('image')) {
                        $data = array('upload_data' => $this->upload->data());
                        $new_upload = true;
                    } else {

                       
                        $error = array('error' => $this->upload->display_errors());
                        echo print_r($error);
                    }
                }


                $categories = json_decode($_POST['cats'], true);
                $subtitle = "";
                foreach ($categories as $cat) {
                    $subtitle = $subtitle . " - " . $cat['title'];                  
                }

                $params = array(
                    'is_featured' => isset($_POST['is_featured']) ? $this->input->post('is_featured') : 0,
                    'title' => $this->input->post('title'),
                    'text' => $this->input->post('text'),
                    'sub_title' => $subtitle,
                    'serving_size' => $this->input->post('serving_size'),
                    'serving_per_container' => $this->input->post('serving_per_container'),
                    'calories' => $this->input->post('calories'),

                    'fat' => $this->input->post('fat'),
                    'proteins' => $this->input->post('proteins'),
                    'carbohydrates' => $this->input->post('carbohydrates'),
                    'price' => $this->input->post('price'),

              
                    'sugars' => $this->input->post('sugars'),
                    'saturated_fat' => $this->input->post('saturated_fat'),
             
                    'calories_from_fat' => $this->input->post('calories_from_fat'),
                    'image' => ($new_upload == true) ? $_FILES['image']['name'] : $image,
                    'cat_id' => $this->input->post('cat_id'),
                );

                $this->Item_model->update_item($id, $params);

//
                  $this->db->where('item_id', $id);
                $this->db->delete('item_categories');
           


               /*insert attributes*/


         

              /*insert categories*/

                $this->load->model('item_category_model');
                $categories = json_decode($_POST['cats'], true);

$subtitle="";
                foreach ($categories as $cat) {

                    $params = array(
                        'item_id' => $id,
                        'cat_id' => $cat['id']
                      
                    );
                    $subtitle= $subtitle." - ". $cat['title'];
                    $this->item_category_model->add_item_category($params);
                }


            

                redirect('item/index');
            } else {

                $this->load->model('Category_model');
                $data['all_categories'] = $this->Category_model->get_all_categories();


                $data['_view'] = 'item/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The item you are trying to edit does not exist.');
    }

    /*
     * Deleting item
     */
    function remove($id)
    {
        $item = $this->Item_model->get_item($id);

        // check if the item exists before trying to delete it
        if (isset($item['id'])) {
            $this->Item_model->delete_item($id);
            redirect('item/index');
        } else
            show_error('The item you are trying to delete does not exist.');
    }

}
