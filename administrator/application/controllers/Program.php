<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Program extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Program_model');
    } 

    /*
     * Listing of programs
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('program/index?');
        $config['total_rows'] = $this->Program_model->get_all_programs_count();
        $this->pagination->initialize($config);

        $data['programs'] = $this->Program_model->get_all_programs($params);
        
        $data['_view'] = 'program/index';
        $this->load->view('layouts/main',$data);
    }


    /*
     * Get Program Items
     */

    function getProgramItems()
    {
        $id = $this->input->get('id');
        $this->load->model('Program_item_model');

        $data['items'] = $this->Program_item_model->get_program_item_by_program($id);
        echo json_encode($data['items']);

    }


    /*
    * Get Program Pricing
    */

    function getProgramPricing()
    {
        $id = $this->input->get('id');
        $this->load->model('Program_pricing_model');

        $data['items'] = $this->Program_pricing_model->get_program_pricing_by_program($id);
        echo json_encode($data['items']);

    }



    /*Get Item Name*/

    public function GetItemName()
    {
        $keyword = $this->input->post('keyword');
        $this->load->model('Item_model');
        $data = $this->Item_model->get_item_by_title($keyword);
        echo json_encode($data);
    }


    /*
     * Adding a new program
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('title','Title','required|max_length[255]');
		$this->form_validation->set_rules('text','Text','max_length[255]');

		
		if($this->form_validation->run())     
        {


            $config = array(
                'upload_path' => "./uploads/",
                'allowed_types' => "gif|jpg|png|jpeg|pdf",
                'overwrite' => TRUE,
                'max_size' => "2048000", // Can be set to particular file size , here it is 2 MB(2048 Kb)
                'max_height' => "2000",
                'max_width' => "3000"
            );
            $this->load->library('upload', $config);
            if (  $this->upload->do_upload('image'))
            {
                $data = array('upload_data' => $this->upload->data());

                print_r($data);
            }
            else
            {

                $error = array('error' => $this->upload->display_errors());
                echo print_r($error);
            }


            if (  $this->upload->do_upload('icon'))
            {
                $data = array('upload_data' => $this->upload->data());

                print_r($data);
            }
            else
            {

                $error = array('error' => $this->upload->display_errors());
                echo print_r($error);
            }


            $params = array(
				'title' => $this->input->post('title'),
				'text' => $this->input->post('text'),
                'image' => isset($_FILES['image'])?$_FILES['image']['name']:"default.jpg",
                'icon' => isset($_FILES['icon'])?$_FILES['icon']['name']:"default.jpg",
                'goal' => $this->input->post('goal'),
                'female_calories' => $this->input->post('female_calories'),
                'male_calories' => $this->input->post('male_calories'),
            );
            
            $program_id = $this->Program_model->add_program($params);


            /*insert items*/

            $this->load->model('Program_item_model');
            $items = json_decode($_POST['products'], true);


            if (is_array($items) || is_object($items)) {
                foreach ($items as $item) {


                    $paramss = array(
                        'program_id' => $program_id,
                        'item_id' => $item['id'],
                        'day' => $item['day'],
                        'meal' => $item['meal']

                    );

                    $this->Program_item_model->add_program_item($paramss);
                }
            }




            /*insert Pricings*/

            $this->load->model('Program_pricing_model');
            $pricings = json_decode($_POST['pricings'], true);


            if (is_array($pricings) || is_object($pricings)) {
                foreach ($pricings as $p) {


                    $paramss = array(
                        'program_id' => $program_id,
                        'price' => $p['price'],
                        'weeks' => $p['weeks'],
                        'text' => $p['text']



                    );

                    $this->Program_pricing_model->add_program_pricing($paramss);
                }
            }




            /*Insert Pricings*/





            /*End Pricings*/

            redirect('program/index');
        }
        else
        {            
            $data['_view'] = 'program/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a program
     */
    function edit($id)
    {   
        // check if the program exists before trying to edit it
        $data['program'] = $this->Program_model->get_program($id);
        $image=$data['program']['image'];
        $icon=$data['program']['icon'];

        $new_upload=false;
        $new_upload_icon=false;

        if(isset($data['program']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('title','Title','required|max_length[255]');
			$this->form_validation->set_rules('text','Text','max_length[255]');

		
			if($this->form_validation->run()) {


                $config = array(
                    'upload_path' => "./uploads/",
                    'allowed_types' => "gif|jpg|png|jpeg|pdf",
                    'overwrite' => TRUE,
                    'max_size' => "2048000", // Can be set to particular file size , here it is 2 MB(2048 Kb)
                    'max_height' => "2000",
                    'max_width' => "3000"
                );


                if (isset($_FILES['image'])) {

                    $this->load->library('upload', $config);
                    if ($this->upload->do_upload('image')) {
                        $data = array('upload_data' => $this->upload->data());
                        $new_upload = true;
                    } else {

                        $error = array('error' => $this->upload->display_errors());
                        echo print_r($error);
                    }
                }



                if (isset($_FILES['icon'])) {

                    $this->load->library('upload', $config);
                    if ($this->upload->do_upload('icon')) {
                        $data = array('upload_data' => $this->upload->data());
                        $new_upload_icon = true;
                    } else {

                        $error = array('error' => $this->upload->display_errors());
                        echo print_r($error);
                    }
                }


                $params = array(
                    'title' => $this->input->post('title'),
                    'text' => $this->input->post('text'),
                    'image' => ($new_upload == true) ? $_FILES['image']['name'] : $image,
                    'icon' => ($new_upload_icon == true) ? $_FILES['icon']['name'] : $icon,
                    'goal' => $this->input->post('goal'),
                    'female_calories' => $this->input->post('female_calories'),
                    'male_calories' => $this->input->post('male_calories')
                );

                $this->Program_model->update_program($id, $params);


                $this->db->where('program_id', $id);
                $this->db->delete('program_pricing');


                $this->db->where('program_id', $id);
                $this->db->delete('program_item');

                /*insert items*/

                $this->load->model('Program_item_model');
                $items = json_decode($_POST['products'], true);


                if (is_array($items) || is_object($items)) {
                    foreach ($items as $item) {


                        $paramss = array(
                            'program_id' => $id,
                            'item_id' => $item['id'],
                            'day' => $item['day'],
                            'meal' => $item['meal']

                        );

                        $this->Program_item_model->add_program_item($paramss);
                    }
                }



                /*insert Pricings*/


                $this->load->model('program_pricing_model');
                $pricings = json_decode($_POST['pricings'], true);


                if (is_array($pricings) || is_object($pricings)) {
                    foreach ($pricings as $p) {


                        $paramss = array(
                            'program_id' => $id,
                            'weeks' => $p['weeks'],
                            'text' => $p['text'],
                            'price' => $p['price']

                        );

                        $this->program_pricing_model->add_program_pricing($paramss);
                    }
                }




                redirect('program/index');
            }

            else
            {
                $data['_view'] = 'program/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The program you are trying to edit does not exist.');
    } 

    /*
     * Deleting program
     */
    function remove($id)
    {
        $program = $this->Program_model->get_program($id);

        // check if the program exists before trying to delete it
        if(isset($program['id']))
        {
            $this->Program_model->delete_program($id);
            redirect('program/index');
        }
        else
            show_error('The program you are trying to delete does not exist.');
    }
    
}
